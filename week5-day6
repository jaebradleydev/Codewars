DESCRIPTION:
Implement String prototype method findParenMatch, taking an index pointing into the string as an argument:
String.prototype.findParenMatch = function(pos) {} ;

Based on the given index, return the index of the matching parenthesis in the given string; or -1, Nothing or a similar empty value, if there is no such index.

What is the matching parenthesis?
Consider this string: "(())". The two outer parentheses are a set, and the two inner ones are another set.

Input Assumptions
The index pos/n provided will always be within the range of the string.

The only characters occurring in the string are a-z and () - you do not need to account for other types of brackets such as [] or {}.


String.prototype.findParenMatch = function(pos) {  
  //We can set a number variable of 0 to represent how many parentheses will have to be gone through to arrive at the matching one to pos
  var numToSkip = 0;
  //The variable we'll use for a for loop's counter will be positive 1 if the parend is opening (thus taking the loop to the right to its match) and negative one if pos is closing (thus taking the loop to the left to its match)
  var step = this[pos]=='(' ? 1 : -1;
  //A for loop can allow us to essentially count how many opening parenthesis after pos occur so that the same number of closing parenthesis can be counted to determine which index matches pos
  for (i=pos; i >=0 && i < this.length; i+=step) {
  //The variable that counts this number will increase with each '(' and decrease with each ')'
    if (this[i]=='(') numToSkip++;
    if (this[i]==')') numToSkip--;
    if (numToSkip==0) return i;
  }
  //If the pos input doesn't arrive at a matching parend, we should then (think: "else") return -1
  return -1
};
