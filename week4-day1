DESCRIPTION:
The hamming distance of two equal-length strings is the number of positions, in which the two string differ. In other words, the number of character substitutions required to transform one string into the other.

For this first Kata, you will write a function hamming_distance(a, b) with two equal-length strings containing only 0s and 1s as parameters. There is no need to test the parameters for validity (but you can, if you want).The function's output should be the hamming distance of the two strings as an integer.

Example:

hammingDistance('100101', '101001') == 2
hammingDistance('1010', '0101') == 4


function hammingDistance (a, b) {
  //We can set the hamming distance to 0 and increase it with each instance of a mismatched number from left to right
  let hammingCount = 0
  //This means we can use a for loop to go from the first index of each numbered pair and add to the "tally" each time the target index's items don't match
	for (i=0;i<a.length;i++){
  //If they match, there's no hamming distance added; and if they do, we can add 1 to the "tally"
    a[i] == b[i] ? hammingCount +=0 : hammingCount+=1
  }
  return hammingCount;
}
